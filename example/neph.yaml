# This is an example build file. If you feel that something is missing from it or hard to understand, please open an issue.

# *** DO NOT RUN THIS FILE, IT HAS SIDE EFFECTS! ***

# The main build file can contain one or two YAML documents.
# The first is the build configuration, the second contains the job definitions.

# This is the config part.
# If this is missing, (the file contains only one YAML document), the default values will be used.
# Any key can be left out (the default value will be used).

# The interpreter that is used to run the commands.
# type:          string or array of string
# default value: "sh"
# If it is a string, then it has to be one of the following:
#   - sh
#   - bash
#   - zsh
#   - elvish (By the way, this is a great shell, check it out: https://elv.sh)
# These shells has built in support in Neph.
#
# If it is an array, then the first item is the name of the executable file,
# and the others are the arguments passed to it.
# If an argument is equal to '/command' it will be replaced with the launched command.
# If any argument starts with a '/' character, then one '/' will be removed from the
# beginning of the string. So if '/command' should be passed to the interpreter as it is, it has
# to be written as '//command'.
# The Elvish shell can't read commands from standard input, so it is passed to it as an argument:
# Remember, it has builtin support, so the following could be written as
# interpreter: elvish
interpreter:
  - elvish
  - -c
  - /command

# The list of environment variables.
# type:          mapping of string to string
# default value: empty
environment:
  EDITOR: kak # Very good editor, check it out: http://kakoune.org
  PAGER: slit # https://github.com/tigrawap/slit

# The list of included build files.
# type:          array of strings
# default value: empty
# Each string can contain shell-style wildcards, these are expanded during parsing.
# The external build files can't have a config part, so they can only contain one YAML document.
include:
  - external_build_files/neph.yaml
  - included/*.yaml

# The name of the launched job. It will launch all sub jobs.
# type:          string
# default value: "main"
main_job: default_job

---
# This is the second document.
# It contains the job definitions.

# The job list is a mapping of string to mapping.
# The keys are the job names, the values are the job definitions.
# Job definitions have to be mappings.
default_job:
  # The list of commands that are evaluated by the interpreter.
  # type: array of strings
  # default value: empty (jobs can be defined without any commands, e.g. for only grouping dependencies)
  commands:
    - shards build --release
    # A command can contain complex code, e.g. an Elvish `if` structure:
    - if (crystal tool format --check) {
        git commit
      } else {
        echo (styled "please format the code before committing" red)
        exit 1
      }
    - git push

  # A string that is prepended to each command.
  # This can be used for example to set environment variables from files.
  # The string is prepended without inserting a newline between it and the command.
  # type:          string
  # default value: empty
  before_command: E:SHELL = (cat shell_name.txt)

  # The same as 'before_command', but this string is appended to the command.
  # This can be used for example to ignore non-zero exit code of launched program
  # by explicitly exiting with zero.
  # Don't forget the newline if needed.
  after_command: ; exit 0

  # The list of environment values set only for this job.
  # type:          mapping of string to string
  # default value: empty
  environment:
    GIT_PAGER: slit

  # The directory in which commands are launched.
  # type:          string
  # default value: "./"
  directory: src/

  # The list of jobs that are required by this job.
  # These jobs are launched before this job.
  # type:          array of strings
  # default value: empty
  dependencies:
    - ignore_error_job
    - non_repeated_job
    - sequential_job

ignore_error_job:
  commands:
    - exit 1
  # The job processing is stopped if a command exits with non-zero, or was terminated by a signal.
  # This behaviour can be overridden for a job with the `ignore_error` key.
  # type:          bool
  # default value: false
  ignore_error: true
  dependencies:
    - non_repeated_job

non_repeated_job:
  commands:
    - tokei
  # A job is repeated if it is required by more than one job (in this case, from `default_job`, `sequential_job` and `ignore_error_job`).
  # If the commands should only run once, set this parameter to false.
  # type:          bool
  # default value: true
  repeat: false

sequential_job:
  # By default, all dependencies are launched in parallel.
  # To override this behaviour, set this key to true.
  # type:          bool
  # default value: false
  sequential: true
  dependencies:
    - ignore_error_job
    - non_repeated_job
